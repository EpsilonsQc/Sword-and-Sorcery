//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Runtime/Input Actions/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMovements"",
            ""id"": ""d61f1da3-71c2-4201-b74d-e1c68ff8d373"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""4086dc26-20f3-4f72-8853-07c7144f7591"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""e342dde4-c29c-4b44-8ab8-4d963f1414ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnLeft"",
                    ""type"": ""Value"",
                    ""id"": ""c59a61a2-0508-44f5-8e03-ffcf224ef78b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""Value"",
                    ""id"": ""88e96d81-8006-4958-a74a-97960957b7d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WalkBack"",
                    ""type"": ""Value"",
                    ""id"": ""b2953ba8-1de3-473b-8e4e-2b11f117e7af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""587d7736-abaf-4e55-bcaa-a074991d5a1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""Value"",
                    ""id"": ""5241b9c1-8236-43b7-96bc-5070c05f56d4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseCursor"",
                    ""type"": ""Button"",
                    ""id"": ""a8590e87-e969-48e2-aa6f-8d39c38d80ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""67081e7e-4c28-48f8-afc3-cda97893c1cc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f414ee55-6bc0-4802-a542-74ca1e64d05c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0e63204-bfa0-4996-8504-60f47042d2cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abe96a53-7e8b-432e-9485-2f0e1df72a6a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe1155e0-4625-43a8-97a0-66eac46e63e5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67abf69a-35fa-4388-b737-79c09c6c3e38"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c7e9cbd-54be-4cde-8f52-f513ae49437d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be148ba6-91f7-4806-906f-018048b03294"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerActions"",
            ""id"": ""fbdb2bbc-a10f-4143-bc50-96c448555c08"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""88303fa0-0bf8-48c9-bbb7-d9ed24d30080"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""a237d615-3a07-4a14-8b78-21637da59219"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1430ade5-023a-4749-a4c0-8f2d4028d878"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""201598b4-b739-4b34-8b1b-edbe35515209"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AudioOptions"",
            ""id"": ""7ac10de1-ecbf-4451-a77e-56d9789d9350"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""48bcf831-42d4-4548-b9b1-d33e5f3b7d4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""3f77336d-6247-423b-97f2-feb59e107ea7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous"",
                    ""type"": ""Button"",
                    ""id"": ""8f0c6ae7-0dd6-4a4d-95a0-6ec3715eff5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next"",
                    ""type"": ""Button"",
                    ""id"": ""1607617c-e21e-4806-83b0-c44c6f98860a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeUp"",
                    ""type"": ""Button"",
                    ""id"": ""74775da3-e237-422d-b323-d12179944214"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VolumeDown"",
                    ""type"": ""Button"",
                    ""id"": ""59bdec0d-27ad-4215-bb98-e515aeb4b5d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35aeed05-118e-43f7-99db-1fcc4a48a97a"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83d3348e-75e9-44d2-a2d1-dc7915bd926b"",
                    ""path"": ""<Keyboard>/numpadPeriod"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0564bc2-1d61-49f0-93b4-9ddfe37328f2"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41284578-e27b-4902-aa9f-c4466be14aa6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d03f35c-8bc7-487e-a7d5-d70385e6e2ba"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d73ccbe-c305-42cb-815e-58d3cc5e3986"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VolumeDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DebugOptions"",
            ""id"": ""723adecc-a92e-48f5-acea-c7f0cef7222f"",
            ""actions"": [
                {
                    ""name"": ""ShowDebugTool"",
                    ""type"": ""Button"",
                    ""id"": ""53264fdb-bcac-407f-8cbe-bdf69fe7d361"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""288fc49d-c2c3-4fca-8f2e-1d70035eee20"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowDebugTool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovements
        m_PlayerMovements = asset.FindActionMap("PlayerMovements", throwIfNotFound: true);
        m_PlayerMovements_Walk = m_PlayerMovements.FindAction("Walk", throwIfNotFound: true);
        m_PlayerMovements_Run = m_PlayerMovements.FindAction("Run", throwIfNotFound: true);
        m_PlayerMovements_TurnLeft = m_PlayerMovements.FindAction("TurnLeft", throwIfNotFound: true);
        m_PlayerMovements_TurnRight = m_PlayerMovements.FindAction("TurnRight", throwIfNotFound: true);
        m_PlayerMovements_WalkBack = m_PlayerMovements.FindAction("WalkBack", throwIfNotFound: true);
        m_PlayerMovements_Jump = m_PlayerMovements.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovements_MouseLook = m_PlayerMovements.FindAction("MouseLook", throwIfNotFound: true);
        m_PlayerMovements_MouseCursor = m_PlayerMovements.FindAction("MouseCursor", throwIfNotFound: true);
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Attack = m_PlayerActions.FindAction("Attack", throwIfNotFound: true);
        m_PlayerActions_Block = m_PlayerActions.FindAction("Block", throwIfNotFound: true);
        // AudioOptions
        m_AudioOptions = asset.FindActionMap("AudioOptions", throwIfNotFound: true);
        m_AudioOptions_Play = m_AudioOptions.FindAction("Play", throwIfNotFound: true);
        m_AudioOptions_Pause = m_AudioOptions.FindAction("Pause", throwIfNotFound: true);
        m_AudioOptions_Previous = m_AudioOptions.FindAction("Previous", throwIfNotFound: true);
        m_AudioOptions_Next = m_AudioOptions.FindAction("Next", throwIfNotFound: true);
        m_AudioOptions_VolumeUp = m_AudioOptions.FindAction("VolumeUp", throwIfNotFound: true);
        m_AudioOptions_VolumeDown = m_AudioOptions.FindAction("VolumeDown", throwIfNotFound: true);
        // DebugOptions
        m_DebugOptions = asset.FindActionMap("DebugOptions", throwIfNotFound: true);
        m_DebugOptions_ShowDebugTool = m_DebugOptions.FindAction("ShowDebugTool", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovements
    private readonly InputActionMap m_PlayerMovements;
    private List<IPlayerMovementsActions> m_PlayerMovementsActionsCallbackInterfaces = new List<IPlayerMovementsActions>();
    private readonly InputAction m_PlayerMovements_Walk;
    private readonly InputAction m_PlayerMovements_Run;
    private readonly InputAction m_PlayerMovements_TurnLeft;
    private readonly InputAction m_PlayerMovements_TurnRight;
    private readonly InputAction m_PlayerMovements_WalkBack;
    private readonly InputAction m_PlayerMovements_Jump;
    private readonly InputAction m_PlayerMovements_MouseLook;
    private readonly InputAction m_PlayerMovements_MouseCursor;
    public struct PlayerMovementsActions
    {
        private @UserInput m_Wrapper;
        public PlayerMovementsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_PlayerMovements_Walk;
        public InputAction @Run => m_Wrapper.m_PlayerMovements_Run;
        public InputAction @TurnLeft => m_Wrapper.m_PlayerMovements_TurnLeft;
        public InputAction @TurnRight => m_Wrapper.m_PlayerMovements_TurnRight;
        public InputAction @WalkBack => m_Wrapper.m_PlayerMovements_WalkBack;
        public InputAction @Jump => m_Wrapper.m_PlayerMovements_Jump;
        public InputAction @MouseLook => m_Wrapper.m_PlayerMovements_MouseLook;
        public InputAction @MouseCursor => m_Wrapper.m_PlayerMovements_MouseCursor;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovements; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @TurnLeft.started += instance.OnTurnLeft;
            @TurnLeft.performed += instance.OnTurnLeft;
            @TurnLeft.canceled += instance.OnTurnLeft;
            @TurnRight.started += instance.OnTurnRight;
            @TurnRight.performed += instance.OnTurnRight;
            @TurnRight.canceled += instance.OnTurnRight;
            @WalkBack.started += instance.OnWalkBack;
            @WalkBack.performed += instance.OnWalkBack;
            @WalkBack.canceled += instance.OnWalkBack;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @MouseLook.started += instance.OnMouseLook;
            @MouseLook.performed += instance.OnMouseLook;
            @MouseLook.canceled += instance.OnMouseLook;
            @MouseCursor.started += instance.OnMouseCursor;
            @MouseCursor.performed += instance.OnMouseCursor;
            @MouseCursor.canceled += instance.OnMouseCursor;
        }

        private void UnregisterCallbacks(IPlayerMovementsActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @TurnLeft.started -= instance.OnTurnLeft;
            @TurnLeft.performed -= instance.OnTurnLeft;
            @TurnLeft.canceled -= instance.OnTurnLeft;
            @TurnRight.started -= instance.OnTurnRight;
            @TurnRight.performed -= instance.OnTurnRight;
            @TurnRight.canceled -= instance.OnTurnRight;
            @WalkBack.started -= instance.OnWalkBack;
            @WalkBack.performed -= instance.OnWalkBack;
            @WalkBack.canceled -= instance.OnWalkBack;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @MouseLook.started -= instance.OnMouseLook;
            @MouseLook.performed -= instance.OnMouseLook;
            @MouseLook.canceled -= instance.OnMouseLook;
            @MouseCursor.started -= instance.OnMouseCursor;
            @MouseCursor.performed -= instance.OnMouseCursor;
            @MouseCursor.canceled -= instance.OnMouseCursor;
        }

        public void RemoveCallbacks(IPlayerMovementsActions instance)
        {
            if (m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementsActions @PlayerMovements => new PlayerMovementsActions(this);

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_Attack;
    private readonly InputAction m_PlayerActions_Block;
    public struct PlayerActionsActions
    {
        private @UserInput m_Wrapper;
        public PlayerActionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_PlayerActions_Attack;
        public InputAction @Block => m_Wrapper.m_PlayerActions_Block;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Block.started += instance.OnBlock;
            @Block.performed += instance.OnBlock;
            @Block.canceled += instance.OnBlock;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Block.started -= instance.OnBlock;
            @Block.performed -= instance.OnBlock;
            @Block.canceled -= instance.OnBlock;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // AudioOptions
    private readonly InputActionMap m_AudioOptions;
    private List<IAudioOptionsActions> m_AudioOptionsActionsCallbackInterfaces = new List<IAudioOptionsActions>();
    private readonly InputAction m_AudioOptions_Play;
    private readonly InputAction m_AudioOptions_Pause;
    private readonly InputAction m_AudioOptions_Previous;
    private readonly InputAction m_AudioOptions_Next;
    private readonly InputAction m_AudioOptions_VolumeUp;
    private readonly InputAction m_AudioOptions_VolumeDown;
    public struct AudioOptionsActions
    {
        private @UserInput m_Wrapper;
        public AudioOptionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_AudioOptions_Play;
        public InputAction @Pause => m_Wrapper.m_AudioOptions_Pause;
        public InputAction @Previous => m_Wrapper.m_AudioOptions_Previous;
        public InputAction @Next => m_Wrapper.m_AudioOptions_Next;
        public InputAction @VolumeUp => m_Wrapper.m_AudioOptions_VolumeUp;
        public InputAction @VolumeDown => m_Wrapper.m_AudioOptions_VolumeDown;
        public InputActionMap Get() { return m_Wrapper.m_AudioOptions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AudioOptionsActions set) { return set.Get(); }
        public void AddCallbacks(IAudioOptionsActions instance)
        {
            if (instance == null || m_Wrapper.m_AudioOptionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AudioOptionsActionsCallbackInterfaces.Add(instance);
            @Play.started += instance.OnPlay;
            @Play.performed += instance.OnPlay;
            @Play.canceled += instance.OnPlay;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Previous.started += instance.OnPrevious;
            @Previous.performed += instance.OnPrevious;
            @Previous.canceled += instance.OnPrevious;
            @Next.started += instance.OnNext;
            @Next.performed += instance.OnNext;
            @Next.canceled += instance.OnNext;
            @VolumeUp.started += instance.OnVolumeUp;
            @VolumeUp.performed += instance.OnVolumeUp;
            @VolumeUp.canceled += instance.OnVolumeUp;
            @VolumeDown.started += instance.OnVolumeDown;
            @VolumeDown.performed += instance.OnVolumeDown;
            @VolumeDown.canceled += instance.OnVolumeDown;
        }

        private void UnregisterCallbacks(IAudioOptionsActions instance)
        {
            @Play.started -= instance.OnPlay;
            @Play.performed -= instance.OnPlay;
            @Play.canceled -= instance.OnPlay;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Previous.started -= instance.OnPrevious;
            @Previous.performed -= instance.OnPrevious;
            @Previous.canceled -= instance.OnPrevious;
            @Next.started -= instance.OnNext;
            @Next.performed -= instance.OnNext;
            @Next.canceled -= instance.OnNext;
            @VolumeUp.started -= instance.OnVolumeUp;
            @VolumeUp.performed -= instance.OnVolumeUp;
            @VolumeUp.canceled -= instance.OnVolumeUp;
            @VolumeDown.started -= instance.OnVolumeDown;
            @VolumeDown.performed -= instance.OnVolumeDown;
            @VolumeDown.canceled -= instance.OnVolumeDown;
        }

        public void RemoveCallbacks(IAudioOptionsActions instance)
        {
            if (m_Wrapper.m_AudioOptionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAudioOptionsActions instance)
        {
            foreach (var item in m_Wrapper.m_AudioOptionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AudioOptionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AudioOptionsActions @AudioOptions => new AudioOptionsActions(this);

    // DebugOptions
    private readonly InputActionMap m_DebugOptions;
    private List<IDebugOptionsActions> m_DebugOptionsActionsCallbackInterfaces = new List<IDebugOptionsActions>();
    private readonly InputAction m_DebugOptions_ShowDebugTool;
    public struct DebugOptionsActions
    {
        private @UserInput m_Wrapper;
        public DebugOptionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShowDebugTool => m_Wrapper.m_DebugOptions_ShowDebugTool;
        public InputActionMap Get() { return m_Wrapper.m_DebugOptions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugOptionsActions set) { return set.Get(); }
        public void AddCallbacks(IDebugOptionsActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugOptionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugOptionsActionsCallbackInterfaces.Add(instance);
            @ShowDebugTool.started += instance.OnShowDebugTool;
            @ShowDebugTool.performed += instance.OnShowDebugTool;
            @ShowDebugTool.canceled += instance.OnShowDebugTool;
        }

        private void UnregisterCallbacks(IDebugOptionsActions instance)
        {
            @ShowDebugTool.started -= instance.OnShowDebugTool;
            @ShowDebugTool.performed -= instance.OnShowDebugTool;
            @ShowDebugTool.canceled -= instance.OnShowDebugTool;
        }

        public void RemoveCallbacks(IDebugOptionsActions instance)
        {
            if (m_Wrapper.m_DebugOptionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugOptionsActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugOptionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugOptionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugOptionsActions @DebugOptions => new DebugOptionsActions(this);
    public interface IPlayerMovementsActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnTurnLeft(InputAction.CallbackContext context);
        void OnTurnRight(InputAction.CallbackContext context);
        void OnWalkBack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnMouseCursor(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
    }
    public interface IAudioOptionsActions
    {
        void OnPlay(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnPrevious(InputAction.CallbackContext context);
        void OnNext(InputAction.CallbackContext context);
        void OnVolumeUp(InputAction.CallbackContext context);
        void OnVolumeDown(InputAction.CallbackContext context);
    }
    public interface IDebugOptionsActions
    {
        void OnShowDebugTool(InputAction.CallbackContext context);
    }
}
